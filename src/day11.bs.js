// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("rescript/lib/js/list.js");
var $$Array = require("rescript/lib/js/array.js");
var $$String = require("rescript/lib/js/string.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Caml_format = require("rescript/lib/js/caml_format.js");
var Belt_SetString = require("rescript/lib/js/belt_SetString.js");

var inputStr = "2682551651\n3223134263\n5848471412\n7438334862\n8731321573\n6415233574\n5564726843\n6683456445\n8582346112\n4617588236";

function coordsToString(r, c) {
  return String(r) + ":" + String(c);
}

function stringToCoords(key) {
  var coords = $$Array.of_list(List.map(Caml_format.caml_int_of_string, $$String.split_on_char(/* ':' */58, key)));
  return [
          Caml_array.get(coords, 0),
          Caml_array.get(coords, 1)
        ];
}

function getAdjacentNeighborCoords(row, col) {
  return {
          hd: [
            row,
            col - 1 | 0
          ],
          tl: {
            hd: [
              row,
              col + 1 | 0
            ],
            tl: {
              hd: [
                row - 1 | 0,
                col
              ],
              tl: {
                hd: [
                  row + 1 | 0,
                  col
                ],
                tl: /* [] */0
              }
            }
          }
        };
}

function getNeighborCoords(row, col) {
  return {
          hd: [
            row - 1 | 0,
            col - 1 | 0
          ],
          tl: {
            hd: [
              row - 1 | 0,
              col
            ],
            tl: {
              hd: [
                row - 1 | 0,
                col + 1 | 0
              ],
              tl: {
                hd: [
                  row,
                  col - 1 | 0
                ],
                tl: {
                  hd: [
                    row,
                    col + 1 | 0
                  ],
                  tl: {
                    hd: [
                      row + 1 | 0,
                      col - 1 | 0
                    ],
                    tl: {
                      hd: [
                        row + 1 | 0,
                        col
                      ],
                      tl: {
                        hd: [
                          row + 1 | 0,
                          col + 1 | 0
                        ],
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            }
          }
        };
}

function validPoints(points, grid) {
  return List.filter(function (param) {
                var c = param[1];
                var r = param[0];
                if (r >= 0 && c >= 0 && r < grid.length) {
                  return c < Caml_array.get(grid, r).length;
                } else {
                  return false;
                }
              })(points);
}

function getNeighbors(row, col, grid) {
  var possible = getNeighborCoords(row, col);
  return validPoints(possible, grid);
}

function valueAt(r, c, grid) {
  return Caml_array.get(Caml_array.get(grid, r), c);
}

function setValueAt(r, c, v, grid) {
  Caml_array.set(Caml_array.get(grid, r), c, v);
  return grid;
}

function toPointsList(grid) {
  return List.flatten($$Array.to_list($$Array.mapi((function (iR, row) {
                        return $$Array.to_list($$Array.mapi((function (iC, param) {
                                          return [
                                                  iR,
                                                  iC
                                                ];
                                        }), row));
                      }), grid)));
}

function fromString(input) {
  return $$Array.of_list(List.map((function (param) {
                    return $$Array.map(Caml_format.caml_int_of_string, param);
                  }), List.map((function (param) {
                        return param.split("");
                      }), $$String.split_on_char(/* '\n' */10, input))));
}

var Grid = {
  coordsToString: coordsToString,
  stringToCoords: stringToCoords,
  getAdjacentNeighborCoords: getAdjacentNeighborCoords,
  getNeighborCoords: getNeighborCoords,
  validPoints: validPoints,
  getNeighbors: getNeighbors,
  valueAt: valueAt,
  setValueAt: setValueAt,
  toPointsList: toPointsList,
  fromString: fromString
};

function increaseInput(grid) {
  return $$Array.map((function (param) {
                return $$Array.map((function (c) {
                              return c + 1 | 0;
                            }), param);
              }), grid);
}

function addToSet(r, c, set) {
  return Belt_SetString.add(set, coordsToString(r, c));
}

function setHas(r, c, set) {
  return Belt_SetString.has(set, coordsToString(r, c));
}

function flash(r, c, flashed, grid) {
  var neighbors = getNeighbors(r, c, grid);
  return List.fold_left((function (param, param$1) {
                var nC = param$1[1];
                var nR = param$1[0];
                var willFlash = param[2];
                var pFlashed = param[1];
                var pGrid = param[0];
                var newValue = valueAt(nR, nC, pGrid) + 1 | 0;
                var g = setValueAt(nR, nC, newValue, pGrid);
                if (newValue > 9) {
                  return [
                          g,
                          pFlashed,
                          {
                            hd: [
                              nR,
                              nC
                            ],
                            tl: willFlash
                          }
                        ];
                } else {
                  return [
                          g,
                          pFlashed,
                          willFlash
                        ];
                }
              }), [
              grid,
              Belt_SetString.add(flashed, coordsToString(r, c)),
              /* [] */0
            ], neighbors);
}

function flashOctopuses(_remaining, visited, _flashed, _grid) {
  while(true) {
    var grid = _grid;
    var flashed = _flashed;
    var remaining = _remaining;
    if (!remaining) {
      return [
              grid,
              flashed
            ];
    }
    var tail = remaining.tl;
    var match = remaining.hd;
    var c = match[1];
    var r = match[0];
    if (valueAt(r, c, grid) > 9 && !setHas(r, c, flashed)) {
      var match$1 = flash(r, c, flashed, grid);
      var points = List.append(match$1[2], tail);
      _grid = match$1[0];
      _flashed = match$1[1];
      _remaining = points;
      continue ;
    }
    _remaining = tail;
    continue ;
  };
}

function resetFlashedOctopuses(_remaining, _grid) {
  while(true) {
    var grid = _grid;
    var remaining = _remaining;
    if (!remaining) {
      return grid;
    }
    var match = remaining.hd;
    var nGrid = setValueAt(match[0], match[1], 0, grid);
    _grid = nGrid;
    _remaining = remaining.tl;
    continue ;
  };
}

function part1(param) {
  var input = fromString(inputStr);
  var pointsList = toPointsList(input);
  var _grid = input;
  var _step = 100;
  var _totalFlashes = 0;
  while(true) {
    var totalFlashes = _totalFlashes;
    var step = _step;
    var grid = _grid;
    if (step <= 0) {
      return totalFlashes;
    }
    var match = flashOctopuses(pointsList, undefined, undefined, increaseInput(grid));
    var flashed = match[1];
    var resetGrid = resetFlashedOctopuses(List.map(stringToCoords, Belt_SetString.toList(flashed)), match[0]);
    var flashCount = Belt_SetString.size(flashed);
    _totalFlashes = totalFlashes + flashCount | 0;
    _step = step - 1 | 0;
    _grid = resetGrid;
    continue ;
  };
}

console.log("Part 1", part1(undefined));

function part2(param) {
  var input = fromString(inputStr);
  var pointsList = toPointsList(input);
  var pointsCount = List.length(pointsList);
  var _grid = input;
  var _step = 1;
  var _totalFlashes = 0;
  while(true) {
    var totalFlashes = _totalFlashes;
    var step = _step;
    var grid = _grid;
    if (step >= 10000) {
      return ;
    }
    var match = flashOctopuses(pointsList, undefined, undefined, increaseInput(grid));
    var flashed = match[1];
    var resetGrid = resetFlashedOctopuses(List.map(stringToCoords, Belt_SetString.toList(flashed)), match[0]);
    var flashCount = Belt_SetString.size(flashed);
    if (flashCount === pointsCount) {
      return step;
    }
    _totalFlashes = totalFlashes + flashCount | 0;
    _step = step + 1 | 0;
    _grid = resetGrid;
    continue ;
  };
}

console.log("Part 2", part2(undefined));

var exampleInputStr = "5483143223\n2745854711\n5264556173\n6141336146\n6357385478\n4167524645\n2176841721\n6882881134\n4846848554\n5283751526";

exports.exampleInputStr = exampleInputStr;
exports.inputStr = inputStr;
exports.Grid = Grid;
exports.increaseInput = increaseInput;
exports.addToSet = addToSet;
exports.setHas = setHas;
exports.flash = flash;
exports.flashOctopuses = flashOctopuses;
exports.resetFlashedOctopuses = resetFlashedOctopuses;
exports.part1 = part1;
exports.part2 = part2;
/*  Not a pure module */
