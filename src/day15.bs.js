// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Grid = require("./grid.bs.js");
var List = require("rescript/lib/js/list.js");
var $$Array = require("rescript/lib/js/array.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Pervasives = require("rescript/lib/js/pervasives.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_format = require("rescript/lib/js/caml_format.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");
var Belt_SetString = require("rescript/lib/js/belt_SetString.js");

var inputStr = "9134437236318171116117288148911191769789149391998581842118486728495315197918969961726641911197278519\n4266599972129377121978987858118144193371121224689932255439189962124983957264992917811528481174141159\n4941264622844649255181863611661937989592573911314587911782284256729939692285214646949151417873145114\n9945129815342473711424195426247119937972981595714311991417119392838691411867714292812665718171417224\n1423818398213251171691473971673889569992131512132754569226823131415196188491991866258247115715611321\n8271949774191463914431151294928179929172131829943916791618917131342352982182671917472939235329739287\n1952694952277173514253513153118634151159329774821227939596521118915991151517398355228881788289998825\n6294228718411191711731415119272125331883929678134156945112362831191869711861933445241916118268865925\n2356988459435979847977978218396878179236826858228579488119689162193671247912113492191423992627295229\n2111941153771299263815996117179768913916931152689617128191487833381948938691616718823312163299281129\n9171226987969165893999355671387991712129929312892448326219555178861569689471513141379921621364122952\n1249283311974145392919182141161915111428797238114236163511979989617362555346148769687595349142819111\n9571153637692556311122411512417957975197837271859411582315253218891991115633697938928761345192119815\n6911911719178156912898261314116923182117799319918261334615762427162794888182289172165471919659749491\n5138941619256899722425914897278227859922169794121914729992557374347523328615137941489945927279892298\n1691252769119353319251199741258446168371199133897657115794287829411223252993425141227229172926195991\n4431947845795998941397452166121292427378268698276815598921157812421421921137439117762855115396211321\n1412756891815118959881159821318921697175898788398954349771755161362198519611669783133198193528874868\n9112427971395352891325118446527417451387398974497274794171961657481915243671945196458978948184534614\n1252984992119991919443992419281218931751632496151245223815394764927248125111917191639415221892886327\n5275881461396171768287168681176851922162133331972139186149383246278369457147977367987123251988139239\n3155313932191132412999399385239196913239141225397279469965159917967896812911581351817198298381714458\n8464311739148758223215553168996711382181221218285896362741211188733419177711385113999818871569458994\n1879111627898539912854218917149885217579453695415812149191615172737921454619365138151192211263832184\n1745287434814238973615122917959292149719727428287841339213292793511992466717722299721728324384289841\n4119917831499159771215319299198921969441688115393251912979392649954159382215672649185991245667814867\n8421899779299898935824114111781991991411972699748599694715611772821147161929899653114683282545695526\n1391911761757955826198918825188872958214852918859954962451299229771599464484643431812976399151594211\n7999299191226143344136335797291214258929751616148411628765219875949185336487232964441426796267617912\n9312793471126411211319197241162921824154811118258812197295391233753951149972246192116499143192987292\n4166762724111379882254285999918693852512391771491411962495421789918493222895245283519755983913436856\n2963981682868141266469319124727698516761839935812991845875451292524746826223193197624842311169613222\n6612255182641994167791551111348896911973163521891312524155251722964145239519186611192969965242913815\n3812621525315137988179772883496249224315754451295212281139491173735522521919727818254843554645119381\n4999158935552656126424919271681281222845174349586213875171837259468168544653738583124471131293191635\n3181461832897859121599429871282449726143213119969341268912719652828419145751649491758911217661915157\n2169192795931271344799317331232245363729244373498978114194323826954196691112529121721939918266141929\n3241171999893699197731615971189489698196184156739628453726665161716169418115729142121813117496917312\n9831982399979619227751246564122511222191768891641244418169396221146399559241628139113624784889111194\n1155992956973218257113121742449819911282169221791685438834989831462311298934183898126817972689556913\n2519898848973471121965719156724668633673521392182113214714862941331418991139359111131317972245927248\n1118272518293161815811581122177733818141312931879171267424799872998965711214314214963634164128586931\n2942442175915698691189261219221898849591485832258619654613715291299912115494527828561788132242817329\n9134374827352131491917164116112919112787815595986821853713344183899964113211196119611514227791311992\n9924299274183222692855629928987629693696499919678172652254115527315712512151391963112118896723831394\n6779188289768247515714634371778114944931198991117156179591211247196718242116149269395151911696952519\n6119956112724139655491921933667514145862512222356296111499316331983418167229798845792853586693717131\n6372419768588511842299529371721979699214258298121849549534431753318493219659119917449983451931926192\n3485612552714411976149279439751975283275376828619691946988338211527217167319996112545312398992879576\n8911294845849625718666114889391259242715919185919258191919825363677319992889695151251781589282852117\n4759389598841389431656112779112613727996898244974817841817673141882655234312237196313473494929711296\n2517916235761217123817811121342199762378281252761996844994858638621799822625147911311996961937298294\n8941194944727437278225493439462865186717416935129471145392629214119511179552917231612758179238812192\n8613679516939369115354319882498579981182142179392359372494313198765131854838591291111497225594621291\n1321812891162243718977896933879119675992957879218399616327481131591451932792366297113625996961715161\n9919212621338919781697293391954682913289543115843443361296269489413995767817811241472294564151339898\n1153111296993149893651924112964964498943984891792279823296848763161369826128828344762117588116482442\n6123889111891594678393829789136113819817277539926913591976269942117982588817411692511994951496113514\n3657811212317993965191682913498637567188187111117115621469178459598143491991792689755739933419117862\n7314238428299521431289133119379941741813916137974192112136216716487266119929717625919112311493945899\n4582259569619129439519515298935136921338659571725612321769129259399162831816521211675898518155647185\n9337781751569517624916199381968246468135841277376892295935423361417921323271527491114899619766811929\n6496894511398568413638937939142622175812611591219465278582322635169316643921142893963885889927221829\n9318299299359253261579998597435658137417149721348299137634991118913481795889317121113338934128838629\n6541881992577123981195284395322888211297894224491391962893439581761934194671147952725731481427916649\n9311452111494252879933898891614768841261859962518671447799131599799521639754123258387678228943995311\n7914972421955981118348969134195843411368511735627132149839112127893994123473952691819167912799723124\n1148123817312136912725525155116195975886323391941888991939816715748973117421318917639921146511652985\n1199179183175916316771119743618165114495659192195944588463122311315675991911843866795727192997866988\n9337612411577132215565136169797995961321193921231868914489125228236861957111791121699917726559832713\n1527861616446251369121672139925121545192136447182614449376627391866462621154311989436118329916169849\n5988658341336525277657964159221299997699171286183921358327151183141825891152978939848511311271593926\n1569247222134936917536456153929155118563335252391138515531339399219733451936875816329472261397159162\n2899483829435817271833114149863318984981183561112229826192183676616452514124142991716196214798497919\n9527213833937136521987411723376681985293899165175386716871819947959194632794697178923684119463547829\n2854432958777866715317916915113811894364131583222426327295252996237937885931182736177587595356652826\n9292791825572342998189238243481265143547123371145272499877211861289528149911866723621152144889164521\n7812791799144112298119927111729999331915996374849222511786242989692145121139867622884136581416861877\n2621697312859698611314954659879711998947319146163283382749226353492995814551983529319197719146319279\n1181689782312573125995572776913895925171719598759894581282921836139182186977823977139988831937622188\n1699371374339217977493799224337731169591838158994283944355214634111659452591451955335692953966318314\n6921766478831113391177431172211315219799523578679981229512729591461641328367485691611299226369221868\n1621183335128299162112113216382599938981412719143441119714219494571485175571363933181533696417218993\n8111733123792914948924741644289258361929671131265585911491923132589853772112698247452955252652287195\n4623565625343971711118316872971671351998386941178128117481951295674894929491113119859179268811672891\n9119253898553912835191299992174182446119522826949624892968911122889389959979722346686641928178371515\n1156979519211885312865297819159992638192941638151344933497157381518531741418311312939933873322996162\n9119866992911469199934229138529227124588462935646719771117722149719163467299528793678922791293192756\n5754112531261399382691549594226235781794322919551722626284861999719919938122995814891929128348195227\n1476939511988755913262415929131918147129878942582826367868775152919383681939285969253767294271769221\n4139838427281391394644889717526983869112349958311477333993331271264398181716117119671177353876357113\n9395111963828795242322999743437188928311517327921181521397714214124992279711196564219515654423132714\n5397995631493629229761241328349116889325332194211384536692587121267898922532891128293457732564197447\n1428788229794345214842932733556277189861813158716216541114488155884118964521257399853593319713317954\n6728345291621899178333839493777613181691411694427424287889116411916641242419499935762325669754616915\n8483418822832213859522891811919124297212128149427761926241859462911148672547925611168174834274766844\n9392994191381132573111791221994711714912329797688737955321919386929933869914697342139924761519959232\n8913639328747941618998853389276157672143941321324374964653258173881963233275332569899861163971254537\n2176921618954489827742992883331891265257528128915417961339186196593313933247197215741495622248115191\n1921172993934749931619794374326831718362869432327311322223119167392126596357641716995181921555441215";

function push(queue, priority, element) {
  if (!queue) {
    return /* Node */{
            _0: priority,
            _1: element,
            _2: /* Empty */0,
            _3: /* Empty */0
          };
  }
  var right = queue._3;
  var left = queue._2;
  var e = queue._1;
  var p = queue._0;
  if (priority <= p) {
    return /* Node */{
            _0: priority,
            _1: element,
            _2: push(right, p, e),
            _3: left
          };
  } else {
    return /* Node */{
            _0: p,
            _1: e,
            _2: push(right, priority, element),
            _3: left
          };
  }
}

function remove_top(queue) {
  if (queue) {
    var left = queue._2;
    if (!queue._3) {
      return left;
    }
    if (!left) {
      return queue._3;
    }
    var right = queue._3;
    var rPriority = right._0;
    var lPriority = left._0;
    if (lPriority <= rPriority) {
      return /* Node */{
              _0: lPriority,
              _1: left._1,
              _2: remove_top(left),
              _3: right
            };
    } else {
      return /* Node */{
              _0: rPriority,
              _1: right._1,
              _2: left,
              _3: remove_top(right)
            };
    }
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function pop(queue) {
  if (queue) {
    return [
            queue._0,
            queue._1,
            remove_top(queue)
          ];
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

var PriorityQueue = {
  empty: /* Empty */0,
  push: push,
  remove_top: remove_top,
  pop: pop
};

function parseInput(input) {
  return Grid.fromString(Caml_format.caml_int_of_string, input);
}

function initialize(param, grid) {
  var startC = param[1];
  var startR = param[0];
  var dist = Grid.setValueAt(startR, startC, 0, Grid.fromPointsList(Pervasives.infinity, $$Array.to_list($$Array.map(Grid.stringToCoords, Grid.toPointsList(grid)))));
  var queue = push(/* Empty */0, 0, Grid.coordsToString(startR, startC));
  return [
          dist,
          undefined,
          queue
        ];
}

function cmp(a, b) {
  if (Caml_obj.caml_greaterthan(a, b)) {
    return 1;
  } else if (Caml_obj.caml_lessthan(a, b)) {
    return -1;
  } else {
    return 0;
  }
}

function minimumDistance(queue) {
  var match = pop(queue);
  return [
          match[1],
          match[0],
          match[2]
        ];
}

function findPath(_unvisited, _dist, _prev, grid) {
  while(true) {
    var prev = _prev;
    var dist = _dist;
    var unvisited = _unvisited;
    if (!unvisited) {
      return [
              prev,
              dist
            ];
    }
    var match = minimumDistance(unvisited);
    var minDist = match[1];
    var point = match[0];
    var match$1 = Grid.stringToCoords(point);
    var match$2 = List.fold_left((function(dist,point,minDist){
        return function (param, param$1) {
          var queue$p = param[2];
          var prev$p = param[1];
          var dist$p = param[0];
          var neighbor = Grid.coordsToString(param$1[0], param$1[1]);
          var nodeDist = minDist + Belt_MapString.getExn(grid, neighbor);
          var nDist = Belt_MapString.getExn(dist, neighbor);
          if (nodeDist >= nDist) {
            return [
                    dist$p,
                    prev$p,
                    queue$p
                  ];
          }
          var dist$p$1 = Belt_MapString.set(dist$p, neighbor, nodeDist);
          var prev$p$1 = Belt_MapString.set(prev$p, neighbor, point);
          var queue$p$1 = push(queue$p, nodeDist, neighbor);
          return [
                  dist$p$1,
                  prev$p$1,
                  queue$p$1
                ];
        }
        }(dist,point,minDist)), [
          dist,
          prev,
          match[2]
        ], Grid.getNonDiagonalNeighbors(match$1[0], match$1[1], grid));
    _prev = match$2[1];
    _dist = match$2[0];
    _unvisited = match$2[2];
    continue ;
  };
}

function printGrid(grid, path) {
  var match = Grid.size(grid);
  var w = match[1];
  var h = match[0];
  var findPath = function (_nodes) {
    while(true) {
      var nodes = _nodes;
      if (!nodes) {
        return nodes;
      }
      var head = nodes.hd;
      var node = Belt_MapString.get(path, head);
      if (node === undefined) {
        return nodes;
      }
      _nodes = {
        hd: node,
        tl: {
          hd: head,
          tl: nodes.tl
        }
      };
      continue ;
    };
  };
  var pathNodes = Belt_SetString.fromArray($$Array.of_list(findPath({
                hd: Grid.coordsToString(h - 1 | 0, w - 1 | 0),
                tl: /* [] */0
              })));
  var printCell = function (row, _col, _str) {
    while(true) {
      var str = _str;
      var col = _col;
      if (col === w) {
        return str;
      }
      if (Belt_SetString.has(pathNodes, Grid.coordsToString(row, col))) {
        var val = Belt_Option.getExn(Grid.valueAt(row, col, grid));
        var rowStr = str + String(val);
        _str = rowStr;
        _col = col + 1 | 0;
        continue ;
      }
      _str = str + "_";
      _col = col + 1 | 0;
      continue ;
    };
  };
  var _row = 0;
  var _str = "";
  while(true) {
    var str = _str;
    var row = _row;
    if (row === h) {
      return str;
    }
    var rowStr = printCell(row, 0, "");
    _str = str + "\n" + rowStr;
    _row = row + 1 | 0;
    continue ;
  };
}

function part1(param) {
  var input = Grid.fromString(Caml_format.caml_int_of_string, inputStr);
  var match = initialize([
        0,
        0
      ], input);
  var match$1 = Grid.size(input);
  var h = match$1[0] - 1 | 0;
  var w = match$1[1] - 1 | 0;
  var match$2 = findPath(match[2], match[0], match[1], input);
  return Belt_MapString.getExn(match$2[1], Grid.coordsToString(h, w));
}

console.log("Part 1", part1(undefined));

function increaseMapSize(grid) {
  var match = Grid.size(grid);
  var w = match[1];
  var h = match[0];
  var wrap = function (val) {
    if (val <= 9) {
      return val;
    } else {
      return val % 9;
    }
  };
  var originalPoints = $$Array.map((function (point) {
          var match = Grid.stringToCoords(point);
          var v = Belt_MapString.getExn(grid, point);
          return [
                  match[0],
                  match[1],
                  v
                ];
        }), Grid.toPointsList(grid));
  return List.fold_left((function (g, param) {
                var param$1 = [
                  param[0],
                  param[1]
                ];
                var stepC = param$1[1];
                var stepR = param$1[0];
                var startX = Math.imul(w, stepC);
                var startY = Math.imul(h, stepR);
                var newPoints = Grid.fromPointsAndValueList($$Array.to_list($$Array.map((function (param) {
                                return [
                                        param[0] + startY | 0,
                                        param[1] + startX | 0,
                                        wrap(param[2] + (stepR + stepC | 0) | 0)
                                      ];
                              }), originalPoints)));
                return Belt_MapString.merge(g, newPoints, (function (_point, gP, nP) {
                              if (gP !== undefined) {
                                if (nP !== undefined) {
                                  return nP;
                                } else {
                                  return gP;
                                }
                              } else if (nP !== undefined) {
                                return nP;
                              } else {
                                return ;
                              }
                            }));
              }), grid, List.flatten($$Array.to_list($$Array.init(5, (function (r) {
                            return $$Array.to_list($$Array.init(5, (function (c) {
                                              return [
                                                      r,
                                                      c
                                                    ];
                                            })));
                          })))));
}

function part2(param) {
  var input = Grid.fromString(Caml_format.caml_int_of_string, inputStr);
  var input$1 = increaseMapSize(input);
  var match = initialize([
        0,
        0
      ], input$1);
  var match$1 = Grid.size(input$1);
  var h = match$1[0] - 1 | 0;
  var w = match$1[1] - 1 | 0;
  var match$2 = findPath(match[2], match[0], match[1], input$1);
  return Belt_MapString.getExn(match$2[1], Grid.coordsToString(h, w));
}

console.log("Part 2", part2(undefined));

var exampleInputStr = "1163751742\n1381373672\n2136511328\n3694931569\n7463417111\n1319128137\n1359912421\n3125421639\n1293138521\n2311944581";

exports.exampleInputStr = exampleInputStr;
exports.inputStr = inputStr;
exports.PriorityQueue = PriorityQueue;
exports.parseInput = parseInput;
exports.initialize = initialize;
exports.cmp = cmp;
exports.minimumDistance = minimumDistance;
exports.findPath = findPath;
exports.printGrid = printGrid;
exports.part1 = part1;
exports.increaseMapSize = increaseMapSize;
exports.part2 = part2;
/*  Not a pure module */
