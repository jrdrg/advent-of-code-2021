// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Grid = require("./grid.bs.js");
var List = require("rescript/lib/js/list.js");
var $$Array = require("rescript/lib/js/array.js");
var $$String = require("rescript/lib/js/string.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Caml_format = require("rescript/lib/js/caml_format.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var inputStr = "95,196\n500,420\n681,633\n31,581\n694,348\n438,824\n408,555\n1277,380\n472,129\n80,779\n1290,159\n823,626\n1191,668\n1005,334\n676,742\n1191,500\n264,658\n1238,756\n192,201\n241,673\n366,236\n354,518\n1255,691\n567,511\n703,102\n816,660\n1128,183\n647,238\n319,348\n1173,434\n805,665\n1131,362\n681,806\n129,178\n974,329\n927,546\n743,442\n537,33\n1205,544\n1243,868\n264,276\n621,604\n355,140\n396,452\n694,546\n169,159\n373,36\n991,686\n422,872\n1208,574\n1081,728\n470,291\n587,26\n731,868\n505,82\n1164,598\n1022,236\n334,3\n371,838\n3,402\n991,432\n226,459\n323,268\n1303,656\n408,885\n507,876\n629,485\n592,658\n105,350\n1141,733\n105,110\n470,63\n1279,49\n689,634\n1203,333\n323,178\n43,672\n694,98\n493,380\n1113,44\n894,320\n159,385\n333,698\n792,366\n982,428\n674,61\n487,11\n980,506\n718,658\n987,64\n835,140\n246,488\n792,528\n791,868\n792,864\n957,826\n718,210\n283,0\n1148,786\n1027,166\n1104,147\n984,681\n803,707\n364,215\n415,190\n87,511\n897,353\n628,376\n552,11\n487,152\n167,298\n1275,642\n659,600\n710,740\n731,623\n1203,561\n1170,166\n1036,33\n320,3\n32,721\n920,724\n700,33\n813,161\n33,260\n222,72\n334,891\n956,854\n689,311\n218,96\n151,296\n1046,434\n924,744\n1113,472\n912,513\n164,213\n1039,427\n483,432\n21,702\n907,847\n35,642\n681,460\n990,891\n661,250\n175,150\n1248,771\n234,211\n487,600\n1230,794\n415,638\n554,52\n517,766\n835,466\n179,532\n659,742\n681,261\n842,614\n827,880\n74,259\n495,807\n1266,84\n487,61\n1071,480\n682,376\n105,558\n731,26\n288,658\n721,863\n853,828\n572,488\n1151,61\n917,415\n1084,50\n827,462\n26,201\n7,238\n689,310\n229,280\n125,399\n1250,291\n447,674\n838,129\n179,588\n323,492\n927,427\n159,197\n927,318\n1089,126\n1163,187\n472,765\n1183,372\n55,691\n1150,10\n85,550\n63,150\n607,558\n155,98\n1078,213\n336,631\n492,108\n1064,885\n1036,714\n102,883\n1235,868\n536,33\n791,26\n651,152\n1151,659\n238,574\n504,39\n938,215\n1046,276\n815,87\n1058,411\n1290,600\n497,285\n542,344\n146,598\n577,438\n703,571\n987,659\n874,96\n146,856\n528,161\n561,856\n818,876\n300,210\n505,665\n267,590\n306,742\n577,736\n1121,688\n793,882\n179,259\n1275,638\n127,397\n1022,348\n1151,309\n971,864\n26,357\n877,560\n308,114\n1225,669\n361,534\n813,285\n147,466\n803,428\n1029,410\n196,362\n984,817\n840,63\n514,728\n1298,87\n293,492\n600,154\n271,585\n536,609\n45,726\n935,683\n939,0\n864,493\n189,688\n964,711\n711,875\n231,644\n79,402\n823,61\n629,261\n417,668\n1282,614\n816,100\n803,635\n1275,229\n962,742\n1166,294\n75,666\n733,886\n878,822\n364,679\n1285,429\n110,824\n774,705\n294,721\n279,344\n464,264\n1109,847\n267,486\n1091,266\n20,735\n1011,866\n888,479\n1205,110\n26,89\n105,544\n822,234\n497,161\n31,357\n463,103\n537,484\n279,550\n525,780\n232,661\n443,883\n20,607\n1278,621\n386,296\n197,472\n957,460\n246,339\n267,366\n1260,438\n1099,435\n305,334\n644,582\n238,747\n311,458\n1174,366\n1082,394\n1073,500\n75,175\n1120,264\n902,324\n77,606\n741,344\n323,626\n733,438\n201,847\n756,883\n8,777\n610,455\n1251,38\n507,259\n768,550\n967,716\n980,10\n32,621\n272,126\n299,866\n1175,474\n1272,595\n264,618\n927,602\n281,278\n800,394\n1026,249\n159,61\n552,834\n621,220\n422,479\n977,196\n1292,562\n600,740\n810,420\n264,434\n323,659\n1002,780\n602,852\n1027,894\n417,21\n621,584\n1295,803\n472,487\n976,891\n793,12\n89,674\n1081,166\n736,884\n140,614\n537,861\n939,838\n1141,159\n1072,299\n572,739\n219,628\n1099,11\n383,467\n572,155\n808,700\n798,735\n1078,479\n552,399\n349,560\n197,102\n1028,663\n140,280\n514,838\n359,805\n169,733\n610,138\n62,236\n1275,256\n1208,847\n642,87\n167,294\n117,96\n182,711\n1166,855\n206,299\n674,71\n974,397\n499,572\n408,100\n1135,150\n863,614\n288,819\n110,768\n382,96\n646,777\n708,42\n169,161\n992,117\n499,98\n150,71\n18,52\n1143,509\n1113,828\n293,422\n383,322\n125,847\n807,150\n335,546\n186,280\n383,602\n1134,199\n1134,695\n735,514\n403,847\n135,252\n554,842\n35,126\n832,487\n274,180\n422,239\n21,192\n294,49\n388,689\n226,50\n890,435\n1031,344\n1113,850\n1002,375\n555,710\n1284,133\n951,537\n949,534\n1285,485\n294,621\n415,862\n838,173\n1110,187\n182,183\n211,446\n927,539\n961,192\n1198,886\n1126,63\n1042,598\n517,576\n766,481\n1210,724\n251,271\n835,428\n1027,614\n708,33\n1307,95\n89,425\n336,117\n984,77\n1284,805\n105,784\n646,845\n75,868\n773,120\n1046,771\n85,102\n100,571\n835,259\n344,374\n1173,460\n1298,15\n311,436\n44,33\n472,686\n815,61\n300,854\n579,175\n1084,396\n392,394\n465,688\n1233,158\n691,574\n823,152\n967,268\n793,409\n949,583\n495,659\n715,408\n498,227\n1275,252\n967,436\n918,500\n290,679\n848,693\n159,509\n636,610\n211,435\n232,479\n238,320\n112,120\n1305,196\n827,14\n611,670\n738,406\n457,850\n823,742\n2,212\n629,633\n805,82\n1233,456\n371,614\n331,659\n847,103\n336,329\n703,558\n1118,425\n396,4\n35,574\n972,203\n1143,298\n1225,792\n371,504\n507,466\n1043,486\n445,33\n750,470\n160,122\n966,520\n408,324\n283,614\n812,227\n472,407\n718,877\n217,94\n589,165\n634,287\n197,344\n282,663\n907,495\n986,234\n336,341\n699,224\n602,42\n691,480\n1113,344\n1221,674\n343,763\n387,366\n957,68\n619,344\n306,511\n457,828\n1061,886\n1181,178\n1146,213\n504,743\n93,856\n112,8\n353,429\n1255,796\n982,681\n457,8\n420,556\n1233,509\n939,446\n1290,63\n924,150\n1285,409\n544,126\n380,628\n136,366\n196,810\n536,717\n687,89\n1052,4\n806,599\n470,831\n633,558\n293,583\n1038,126\n838,721\n599,1\n494,660\n1284,537\n417,469\n758,462\n383,427\n619,32\n927,322\n422,22\n92,883\n237,873\n1198,774\n1093,94\n211,459\n582,138\n1300,243\n102,856\n846,21\n7,656\n318,777\n567,442\n1307,229\n927,501\n390,170\n661,644\n465,651\n647,656\n493,514\n627,28\n89,469\n1089,320\n1017,135\n27,530\n967,10\n35,256\n1039,124\n820,892\n847,791\n636,61\n1223,511\n574,772\n691,677\n636,833\n1128,711\n689,738\n514,504\n65,367\n927,585\n700,756\n1160,599\n1277,514\n865,33\n636,562\n629,409\n1174,30\n492,18\n1282,147\n893,226\n1284,201\n447,280\n1208,856\n355,306\n10,651\n60,603\n504,855\n488,436\n398,625\n863,728\n258,890\n857,47\n33,514\n974,631\n238,443\n264,771\n423,250\n758,11\n293,759\n982,466\n992,777\n495,665\n519,26\n55,484\n197,646\n629,434\n783,820\n1073,469\n354,854\n775,730\n504,599\n1263,344\n432,822\n433,560\n319,208\n1208,435\n1017,402\n1183,397\n1027,418\n239,480\n495,742\n565,668\n1005,478\n905,61\n623,537\n902,772\n651,809\n966,374\n1091,355\n346,780\n1079,250\n535,730\n800,500\n127,497\n1078,22\n1010,684\n1114,362\n241,120\n462,537\n408,122\n1113,8\n494,100\n709,352\n241,497\n701,168\n922,607\n920,276\n127,845\n44,84\n371,418\n827,432\n1072,707\n838,487\n293,135\n873,878\n237,425\n72,756\n1139,14\n1012,299\n855,596\n621,634\n1131,84\n1263,323\n773,774\n979,659\n609,168\n420,435\n505,229\n815,833\n1164,856\n917,479\n602,490\n301,68\n179,84\n589,729\n50,456\n554,883\n507,18\n967,178\n510,500\n845,243\n475,428\n1265,278\n1078,661\n544,861\n621,738\n1005,560\n1072,443\n875,355\n18,114\n361,583\n1102,493\n954,280\n221,574\n428,571\n623,89\n1114,84\n749,262\n1267,224\n803,876\n1121,542\n510,208\n1150,548\n321,698\n820,786\n627,812\n1205,784\n92,694\n1307,117\n1192,625\n363,798\n10,203\n216,152\n817,514\n308,375\n378,886\n592,877\n1285,261\n311,716\n335,686\n514,56\n610,756\n1059,26\n774,285\n\nfold along x=655\nfold along y=447\nfold along x=327\nfold along y=223\nfold along x=163\nfold along y=111\nfold along x=81\nfold along y=55\nfold along x=40\nfold along y=27\nfold along y=13\nfold along y=6";

var InvalidFoldType = /* @__PURE__ */Caml_exceptions.create("Day13.InvalidFoldType");

var InvalidDot = /* @__PURE__ */Caml_exceptions.create("Day13.InvalidDot");

function parseInput(input) {
  var match = List.partition((function (i) {
          return i.includes("fold along");
        }), List.filter(function (i) {
              return i.length !== 0;
            })($$String.split_on_char(/* '\n' */10, input)));
  var foldInstructions = List.map((function (i) {
          var parts = $$Array.of_list($$String.split_on_char(/* '=' */61, i));
          var value = Caml_format.caml_int_of_string(Caml_array.get(parts, 1));
          var match = Caml_array.get(parts, 0).replace("fold along ", "");
          switch (match) {
            case "x" :
                return {
                        TAG: /* FoldX */0,
                        _0: value
                      };
            case "y" :
                return {
                        TAG: /* FoldY */1,
                        _0: value
                      };
            default:
              throw {
                    RE_EXN_ID: InvalidFoldType,
                    _1: i,
                    Error: new Error()
                  };
          }
        }), match[0]);
  var dots = List.map((function (c) {
          var match = $$String.split_on_char(/* ',' */44, c);
          if (match) {
            var match$1 = match.tl;
            if (match$1) {
              if (match$1.tl) {
                throw {
                      RE_EXN_ID: InvalidDot,
                      _1: c,
                      Error: new Error()
                    };
              }
              return [
                      Caml_format.caml_int_of_string(match$1.hd),
                      Caml_format.caml_int_of_string(match.hd)
                    ];
            }
            throw {
                  RE_EXN_ID: InvalidDot,
                  _1: c,
                  Error: new Error()
                };
          }
          throw {
                RE_EXN_ID: InvalidDot,
                _1: c,
                Error: new Error()
              };
        }), match[1]);
  return {
          dots: Grid.fromPointsList(true, dots),
          foldInstructions: foldInstructions
        };
}

function mergeGrids(g1, g2) {
  return Belt_MapString.merge(g1, g2, (function (_key, v1, v2) {
                if (v1 !== undefined) {
                  return Caml_option.some(Caml_option.valFromOption(v1));
                } else if (v2 !== undefined) {
                  return Caml_option.some(Caml_option.valFromOption(v2));
                } else {
                  return ;
                }
              }));
}

function foldHorizontal(y, grid) {
  var match = List.fold_left((function (param, point) {
          var bottomHalf = param[1];
          var topHalf = param[0];
          var match = Grid.stringToCoords(point);
          var c = match[1];
          var r = match[0];
          if (r < y) {
            return [
                    {
                      hd: [
                        r,
                        c
                      ],
                      tl: topHalf
                    },
                    bottomHalf
                  ];
          } else if (r > y) {
            return [
                    topHalf,
                    {
                      hd: [
                        r,
                        c
                      ],
                      tl: bottomHalf
                    }
                  ];
          } else {
            return [
                    topHalf,
                    bottomHalf
                  ];
          }
        }), [
        /* [] */0,
        /* [] */0
      ], $$Array.to_list(Belt_MapString.keysToArray(grid)));
  var topGrid = Grid.fromPointsList(true, match[0]);
  var bottomGrid = Grid.fromPointsList(true, List.map((function (param) {
              var newR = y - (param[0] - y | 0) | 0;
              return [
                      newR,
                      param[1]
                    ];
            }), match[1]));
  return mergeGrids(topGrid, bottomGrid);
}

function foldVertical(x, grid) {
  var match = List.fold_left((function (param, point) {
          var rightHalf = param[1];
          var leftHalf = param[0];
          var match = Grid.stringToCoords(point);
          var c = match[1];
          var r = match[0];
          if (c < x) {
            return [
                    {
                      hd: [
                        r,
                        c
                      ],
                      tl: leftHalf
                    },
                    rightHalf
                  ];
          } else if (c > x) {
            return [
                    leftHalf,
                    {
                      hd: [
                        r,
                        c
                      ],
                      tl: rightHalf
                    }
                  ];
          } else {
            return [
                    leftHalf,
                    rightHalf
                  ];
          }
        }), [
        /* [] */0,
        /* [] */0
      ], $$Array.to_list(Belt_MapString.keysToArray(grid)));
  var leftGrid = Grid.fromPointsList(true, match[0]);
  var rightGrid = Grid.fromPointsList(true, List.map((function (param) {
              var newC = x - (param[1] - x | 0) | 0;
              return [
                      param[0],
                      newC
                    ];
            }), match[1]));
  return mergeGrids(leftGrid, rightGrid);
}

function applyFold(instruction, grid) {
  if (instruction.TAG === /* FoldX */0) {
    return foldVertical(instruction._0, grid);
  } else {
    return foldHorizontal(instruction._0, grid);
  }
}

function gridCellStr(v) {
  if (v !== undefined && v) {
    return "#";
  } else {
    return " ";
  }
}

function part1(param) {
  var input = parseInput(inputStr);
  var firstFold = List.hd(input.foldInstructions);
  return Grid.pointsCount(applyFold(firstFold, input.dots));
}

console.log("Part 1", part1(undefined));

function part2(param) {
  var input = parseInput(inputStr);
  return List.fold_left((function (grid, instruction) {
                return applyFold(instruction, grid);
              }), input.dots, input.foldInstructions);
}

console.log("Part 2", Grid.print(gridCellStr, part2(undefined)));

var exampleInputStr = "6,10\n0,14\n9,10\n0,3\n10,4\n4,11\n6,0\n6,12\n4,1\n0,13\n10,12\n3,4\n3,0\n8,4\n1,10\n2,14\n8,10\n9,0\n\nfold along y=7\nfold along x=5";

exports.exampleInputStr = exampleInputStr;
exports.inputStr = inputStr;
exports.InvalidFoldType = InvalidFoldType;
exports.InvalidDot = InvalidDot;
exports.parseInput = parseInput;
exports.mergeGrids = mergeGrids;
exports.foldHorizontal = foldHorizontal;
exports.foldVertical = foldVertical;
exports.applyFold = applyFold;
exports.gridCellStr = gridCellStr;
exports.part1 = part1;
exports.part2 = part2;
/*  Not a pure module */
