// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("rescript/lib/js/list.js");
var $$Array = require("rescript/lib/js/array.js");
var $$String = require("rescript/lib/js/string.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Belt_MapInt = require("rescript/lib/js/belt_MapInt.js");
var Belt_SetInt = require("rescript/lib/js/belt_SetInt.js");
var Caml_format = require("rescript/lib/js/caml_format.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");
var Belt_SetString = require("rescript/lib/js/belt_SetString.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var inputStr = "ceb bgfdea febgc ec eadcgfb eagbcd fcdebg dcef gafbc egdbf | fdbgec fedbg gdabefc gefbd\naf cegdabf cfdge ecdbfg dcfga edafgc cfa cabedf gdbac afge | cgdab bcagd badecgf fa\nbgacfe cbedgf degcabf dfgcba gdcfb dfeca bgda cadbf bca ba | cab fbdeagc dcfbg cfgdb\ndg fadgceb dacbef agfeb gcdbef edcbf gdf ecgd cgbadf defbg | bedcf bgdfac cbfedg abfeg\nfedga gebfc cade gacef afc agdbfc degbcaf gdacfe gdefab ac | dacbgf gacfe faegcd decfag\ngecbd fbcdg ebgdcf dcfbag dec ebdgfac cebga de efdb acdefg | afbgdc edbf de ed\ncdegfb bgdafec gabfec cef afbe eagfc gecab agcdf gbadce fe | efc egacbf gecbfd cfage\ndac aedb fadcge gfebac cfeba abecfd bdafc dbcgf edgabfc ad | acgefd afbce bcfeag cad\nagbcfd acedf adcgeb fegb egdcfab agbec eagfc gaf fg bfeagc | acefbdg fag afbcgd fga\nceagdb eabg cfadge dgfceb dgb aedcg gb gfeadbc bcdag dcfba | cfedag bg ebcagd ebcagd\ngacdbf cdfbg cb gfacd gbfde dagefc febcdag gbc eacbgd bcaf | egbdf cefadg adgcfb cbgdfa\ndeacbg bfdgc efcbda fcgbed afbdg gcef cebgadf begdc cfb fc | cgfe gfec cfb bfc\nfe egbda fbaeg egf gbdcfae efbd agbdfe bgafc gdbcae gefcda | feagb gdbae debf acfdeg\ndfbace abd dagfbec abfcg cadegf begd degca bd dcabg gcabed | gbadc fgeacd gcabfed cfdeba\nbg fgb fcadgb cfdeabg ebcdgf gfdce gcfbe fcabe dgeacf dgbe | bg fcbeg cfgebd fcbaegd\ngefc cfgbade fg eagfd aecgd efdcag ebfad geacbd bagcdf fga | gf gefadc dgface bfaed\ncfabg dfcgea fgc cdbf dcabg fc cfdabg cbdgae fdcgeba gefba | dgaecf gfc acbdg fgc\nad adc adcbge afbcd bcfae gdfcb cbdgfae fcedab cafbeg defa | adc bgfcd fabdc dcfbea\nfcaegdb agb efcbag bdcg bacfde afbcgd acfdb bgafd gafed bg | cbedgfa ebdfgca gfead cdbg\ngb egb gecfbd dgbc cbfge efbgadc efdcb ebfdac gdeafb fgcea | edfgcab bdcg gebfcd dcefb\ndca febdc bfaegc cgfdae agefcdb ebcdag ad adgf eagcf feadc | egcaf bgaefcd fcgade cdebf\ncegfd ecdb egafc fde bfdceg bgcfd dgeafcb cbadfg edfgab de | aegfc bcagdf eafbgd fbcdg\ngfdb gdafeb dceabg bd becfa dbfea degaf cfgeda gbeacdf abd | agdefb ceadgb fgaecd dfbage\nba afcegb degac gaebc gedfbca cafb fgecdb bae feadgb gfbce | fbac bafdge ebdcgf aecgd\ncbefda gcbf efg bdfce dbefg bcfegad cefdga gbdea fbgedc gf | bfdcge ecadbf cdefb gf\nacbfd adefgcb adefbc dag bgfda gdcf egbaf dg acbdeg abcdfg | decbga cdafgb cedgafb dag\nfedabg cfgabe cedf adceb eca beadcf agbcefd afdeb adgcb ec | cegafb gecdabf ebcad dbgcfea\ncadefg dgb bd adbgef fdbcgea gfcdba fagde gbcef dabe degfb | agcdfe baed bgecf db\ngcdf efdcga afecg cgaefb bfagedc efgda def df cfaebd baegd | cdfaeg gfaecb cdaebfg fecag\nedfcg fgcea faed dge gdbaec bfgaec de fecgda dgecbfa bcdfg | defa gafdec acefg ged\ncgabe cedaf faecdb gcefda cfb bf fbcae gdeafbc gdfcab debf | gfdaec efbd efgcbda fb\ncda bgacedf bafdc bfdaec ecbd bfcae cfgdae fcgbea bfgda cd | adc becfa fagdbce egabdcf\ndageb agefd cdbga eb fgecabd baegcf bge dgbcae dcabgf cbde | edbga ebdc cabfegd bgecaf\nabfgce fbdagce egfc gc agfedb bdfca bagcf bcaged cgb faebg | gfcba ebcfagd dbefcga bcg\nagfec gdeacb fbgdca bfgacde faeb gaecb af edfcg egfcab afg | faeb gaf agdecb afg\ncfd cgdae egafdbc daefc debcga gacf cf fgdbec aefdb efagcd | dacebg gfac daceg gcdbae\nfbead ae cead fea gbafdec cgebfa bfecd eafcdb ecdgfb dgfab | ebacdf fea facebdg fbedca\ncbgfa gdc gd ceadb adfcgb cbaegf fagd ebgfdc acdgb aebfcdg | gcd dg bdagc badgcf\ncdbg gc bdfcea cfbedga ebfcg fgc agbef cbfged dcafge ecbfd | gbfedac edfcb cbdfea gefba\nbadecfg egfabd fcdeb eadbf geafcd aedgcb abgf bdaeg afd fa | af beafd adf agdbe\nfgbedc aedbf bdfacge decbg acd ac ecag gcfbda bgadec dbeac | ecag ecga gdaecb ecdab\nbfagc fcgea fce acefbd fgedacb ce aegdf eafcbg cgbe acbfdg | cafbg fce fgade fgeda\nebadc bcgad efdbag dbgcfa fcgb dgcfea dgacf bg gba bgaecfd | edagfb gb dcefabg gb\ndcf cdbgea gdfec dcafeg eacgd cf fbadegc gdfeb efdcab fcga | dacge acfgde cedgf egbdf\nafdcb febdag adfbe fedg dcgabe befdgac dbe de eabcgf baefg | bgdfeac dcbfaeg fcbad ed\necbd ebg agcebf be cfdbag gcbad eabgd ceabgdf gafde gbcdae | cbde bdcag gdaecb dbgca\nbadgfce eabfgd cd dcfbea cda dceg fgcba gadbec adgbe adgbc | gdec bcagd dfabce bdacge\nadf afceb bdafe dgfbae ad dcfage bgad gfebdc fdbagce edbgf | bgaedf acfeb da becgfd\nbdg dgbcaf fdgeab bgdef bd fecbgad ecbafg dfegc gafeb abde | bfage baed bcfeag afdgecb\nbcdeag bagec cadfgb cgdab bge aegbfd eb bcde gbcadfe fecga | eb fdbcag bfdecag debagc\nbfegcd bgce fbdcga bc cfdeg fbc dbefc fcgade aefbgcd dbefa | dfgbca edgfac fcgadb gbafcd\nbfcgaed abfgc dfbgac ecfgd acbgde db feagcb dcb dfgbc adfb | bgfdc fcebga dabf fgacbe\ncebfg fgcbad fca ca faceg fadceg dbfaeg cade bcedagf dagef | cbfeg ac cebfg aegcf\nega ebdgaf cadef acdefb agbcfed cgfa ecgda afedgc ag gcdeb | eadfbc dfeabg ega fgedab\ncdbeag fa adbec egbfda fabcd fda eadcfb aecf fbcgd gbadefc | af bacdgfe fa fda\nfegba cgafeb fcgdbae acfg bfeac gbcead edbgf afbdce agb ga | gaecdb gdfeb ebcfag gaebf\ncfega adceb bgc gdba bgadce fdaecbg cdebaf gb efcbdg cebga | gaefc edcbaf fcage eafdbgc\nadcb edgfc aedbgf daecf dbecaf dfa acfeb cgadefb aecgbf ad | dabc cfeab bdacfge caefbg\nbgdfeca dbacg gadefc bcegd cfbadg ca agdbf bcaf dca fadbge | eagfdb gfabd begcd ac\nbfdea bg aegcdb dgabf bag bcgf dbfcga gcdefa fagdc agbdcef | bfgc defacg efabd cdafg\ncgdfae dea geabcd cebad geba edcfabg ae adbcfg cabgd bcfed | gcfadb eda acdgb gfcaed\nba fdeba fbca ebdgca bea deafcgb aedfc cadbef dceafg dgbfe | defac beacdf adbfce ecdbfga\neabfg bgdeac bcfeda gdfabce befgda afgd af afb fbcge baged | cfabde fageb fegcbda afegb\ngdafcb gafed cfdbgea gcea edbcf cg fagdbe gdcef gcd gcefda | begcfad dfgaec cg gdfae\ngefad gecdaf gfd gaecdb cfed adcge df fbeag bfcaged bfadcg | fgbdaec ecgda fgbae dfg\ncdg ceda agbfc fdbega fbedcga gbdcef facgd cd faedgc fgead | facgdeb dcfag gdfceb gcd\ngcaed fdaeb bg gabedc dbcg bag agcefd edgab cgbfae fcdbega | afbegc fgabec gba gbdae\necbagd db ebcfg agedf dgfeacb efgdbc abecgf ebfgd bed bfdc | eagdbcf db bd bde\ndfecbga faebdg fgcd gd adg ebcad acefg acgbef ecafdg cedag | gd efbdga eafcg gfaebd\nbfgcea fegcbda cfgea adcfge dcea dgbecf gfdac dgbaf cgd cd | fecga cgd eadc fbdga\ngefbacd fgac abfce ebdacf bgfaed bceafg fg egbcf bgf gdbec | gbfec aegfcb faegbd gbdecaf\ndfbage adcbe be afdce ebfc adgbc edb abegcdf cfagde dfebca | cbagd edbafg adgcb ecfda\nedabc bedgafc fd adf begfad fcgd cdabf efcgab gcbfa cfdagb | df df df fecbag\ncfdg adfec daecb afc fc cadgfe fcedgab cagfeb fbagde dgeaf | acdeb cf afc dfgc\nefbg acgefd eb cfdgeba badef gedfa bcgeda deb dfcab fedgba | afbedg afdgbe abdfc afedcg\ngaedf ed gafce afegcd egbcfa deca bdfceg dfabecg fed gdabf | ed efd afdgb edf\ndcbaef gfdb dafgc efbcga bcfadg cgf bdcaf gf aedgc faecgbd | cfdeab cfg bgecaf cdgaf\ndefbga aegb aefdb aebdfcg febdca ag gedaf abdgfc afg dfegc | ga acdfbge cadgfeb bdgafe\ndafeg cgdae efdgb dgbecf gfa bdfacg afbged bafe af efbgacd | bfcedg dagebf aefb acegd\ncbga cb fegac baedf faedcg facgdeb efacbg fcb bcfegd eabfc | bfade gcfbeda bc bcf\ndbfaecg aebdfg agbcef ca bfgdac bgace cag bgedc gebaf acef | agcfbe bgdce abcegf bgcea\nadfge bafe gcfaedb cabgdf gabedf gaf dageb efcgd cedgab af | eadgf baef ebgad dgfcaeb\nabfdcg fdebagc bdgae gadfec ed gfeadb afbgd gebca debf edg | fedb bgaedf ed aegbd\naecbd ebcga abgfc eg gbefdca caedbf degb eabdcg cge fdcage | cfdegab gebd bgdcae ecg\nadebg fgcd cadef afg fdcegba caefdb gf feadg cfeagd gfcaeb | fga dfaec eafbcg fg\neb fdcgab bfade ecfgadb aecdf gfdab bfeg dabegc begfda edb | ebd abcfgd bcedfga bgfe\neac adfec gadecf faebcgd dacbf bgdcea gefdc ae egfa bcedfg | abgcdfe gbeacd cae gfea\nba feabdc adeb dcfba geabcf gbcdeaf cdfbg edacf fgaedc bac | ba afdec bdae abcdgef\nbgad cgdaf bd bfceg agfbdc cadebf cdb fecdga bdcfg dcegbfa | bdfagc fdcbag cgfead agedcf\ndfgcba fgec cafegb afecb efbcdga gdeba bafcde ecbga gc cag | fcgabde adgbe debfac ecfg\nbcfea dabe defbac dbcfg cad efbagc ad adbgefc edacfg abdfc | aecbf dac da ad\ncbaf fbe agebf geacbf cgabde gbaec bcegfd fb fdeag cfbaegd | agcdefb gfeda ebgaf cagedb\ncd cebadg dbfc gcd cafbdg adfgb ecafg fcagd aegfbd efdcbga | fgdcba bfcd agcef dc\nafeb ba bgfade gacdf agdbf gba egdbf gbdecaf cbgdfe cbdage | dbfga fbedg gba agbdefc\nbgdafe gfced cbfagd fa bdecag cgdfa fcegadb abcf gbcad gfa | bgcad abecgd edgabc gecbfad\ncgfeb gbaef dfcg bgc cgaebd gc becafd dbcfe gefacbd cefgbd | gc gcb cbfde bcegad\nbg bega cfdeg cebda fdeabc dgebc cbdage dgfcab bdg fedgabc | edbgc ebcadg fgdce abcedf\nfeadgc bgf febgcd gbcdfa faceb gbcfe gb dcfge gedb bacfdeg | bgf gbf dfegac fbg\ngbacf ab agcefd decabg bcdagfe begfac cba fdbgc agfec ebaf | agbfc ba cdbgf fcbdg\nadfe fa afb cdgeba agdebf fcgebad begad ceafbg bfgdc fdagb | baegfd adfgb dbega fba\nfdceba dbega ecb cb abcf gacfed cgfdeab fedca cedba gfdbce | bdeacf acdfe cb fecda\ndcegfa faebcg bafgd gfb bdfca gb fgabecd agdef begd beadgf | bfdga efcagd dgabcfe ebdg\naecdgf beadgc geb dcefbg aegdb dbafgce gb dabfe cagb dceag | dgcae ecgbad deacg edcagf\nedga fbgedca gef becfd fbgda dfgcba ge dbegf abfdge cagefb | eg bgadfe eacgfb bdafgc\nafcbg acg dgafeb gefc afdcb cadebg befag defacbg cg abfgec | acg cg gbfcea dbfac\nfdbgcea cfgeb agdefb ecbfad abfde cd cadb debcf dcf cfegad | cgfeda cdfegba ecfgb edacfb\ngdaecb ecbdg dacg fgedbc caegbdf gfeab bfdeac dageb ad bad | dab gdaecb da gcfedb\ngec gcaeb ecdab fegb cfgaedb eacfbg bgdcaf fgaecd eg bfcga | bcegadf gaecb acbgdef gcfab\ndf fbgdec fdg dgacb fabge afdbcge bdgace dbfga fcda bgdafc | cgbdfe bdfga fd df\nebdaf gabfced abecf efgad db ebfcdg deb bacd fbgeca fedcba | abcdef acbd fcbadeg fdbae\nadfeg be dgbca cefgbd bedga deb dbgcfae adcgfb dacbge cabe | debfgca acbe dgafe ebd\ncdgbf gcbfda gd dbga eafcbd cdafb cegfb deagcf abcegfd cgd | aegfcdb gadb fcbad cbgfd\ndeb bafcgd dafce cabed agdbec febdag be gebc dgbca fdacbge | gecb abdgc bed eb\nafc ac cebdaf becgdf agdfe cabegf bacd fdcbe dcefa cdfagbe | ca cfa bdca cbda\naegfc edfac fabcde cfeabdg dagcfe fadg efcbg ga cbagde acg | bgecafd acg begcf dfcea\nfdgac fedabc cdge ebagf cgdfae ec eac gacfe bfcdga cfbdage | fbcdeag gabfe bdfagc caegf\nfagdbce fcbed fegca agdc cadfge dg fgdce egd aefdbg gebfca | cfegab gbefac deg gde\neb bcegda efgdc ecfbda dbe fbae dfebc aegcfbd dagcfb dcfba | fdbgca dcagfb afbe be\nbegacf fceagd fec ce defab cbge agcbdfe becfa acfgb bgadcf | ce afgbc cegb ce\nfbadg cbeafg fb eacfdg efbd decfgab fdaeg bdefga acgdb baf | fadeg bdfe bfdgae ecfbag\nebfcgad ag afdecg gbafec egdbc dgcae aefdcb dcefa dfag aeg | acdfeb cafdbeg fcgdae cdgea\nda ead gbeda gbaec gcebdf gbfcdea ebfdg dgebfa adefcg badf | da fgcaed dfba afdcebg\nfgdaec fbegad cde ec efagcdb cgfbd dcbaef gadef dfecg agec | dce ced ecga fdaeg\nedfg de dagebc caefgb dfeca gfeca ead gdaecf fgeabdc dbfca | de befcga fceagb dcfae\ngda cdaef gbeacf gbafcd dfcaegb cdbg efadgb dfcag dg gafbc | afcbg gda fbegda fagbdc\ngfdcbe cadgf defag bfadce ac dfcagb fdbacge cbga afc bgcdf | begdcf dcfbg aedcbf degbcf\nce cgbfed degbfac cde cagbdf cgfad debfa deacf cgfeda cega | ec bfadgc dfbcage gebcfd\ndfbceg dgeac acbf aebcg ebfga bcfgae adgfecb cb gbdeaf cbe | cbe cfba bc ebcfadg\nfbgdc acd cbeaf ad bcdfa fdacbeg efad agcdbe bcafeg fbcdae | cad afcbe da gdbaec\nbcgde cbadefg efgdab bfc aebfg fc bgfcda febcg gafbec eacf | bfc bcf bgcdfa dgaefb\ngc cdg gcfade dfcea abfdce gace cgadf aebdcgf gbafd cebgfd | cgfad ecga cg cg\neadgbc ce dec afdeb ebdfc cfeabd cegbfda afec fbgdc baefgd | afec gfbead defbc bgfdc\nagcde acfegbd dbcgf dbcfge ecf fbaecg fe gdefc cfbagd bedf | cafbdg dagec cgefab gfcedba\nfbacg beadfc gcd gd cdfag fdeac ecbfgd ecfadg gdfcbae dgea | fdcbaeg gbecdf daefc fdgac\ngf degf bfdeag gbaef ebgfadc gaf caegb dfcaeb dbagcf fabed | afg ecdgafb cabdef adbfce\nadbgc dacbeg gecabf fcda cgefbda cf dbgfe cfb dgbfc dfgcab | afdc fcb cf dacf\nfdgace ba gdaeb egcbd fegbcda afdbge abg bfad efgda gcafbe | bag gab efdga fedagbc\nbgadc ba bga gdace bagdfce agcdeb degbaf ecab fgcade bfcgd | begdcfa ba ba ecgad\nbcegfa dafbc fbg fg dbgea adecbg bacgfed abfdeg gdabf fdge | fdcab gedf cbdfa gadebc\ngabdefc gdface edbag facgd gef acfe gdefcb efgad cbgfad ef | dafecg aecf gcdaef begad\nbdfcag adgfb ag efdcbga dbeacf bga egabcf cbdaf bdefg acdg | bga ceagdfb cegbaf egbcfa\naegfdc dbace bcaefd geabcd ag debfg ega eagbd dfbgeac gcba | agebdc deabcg dbfecga bceafd\nebad gfacbde ecfagb ea dcafg dfbge edfgbc fgdae eaf agdfbe | gebafd ae afbdeg dgfea\ngfc gedfa fdac cgbae ebafdg edfcag cfbdeg gcadbfe fc gcfea | adgfe eadfg egdfa caegdf\nfbdea eacbfg aegfb dgbf dcebgfa edgabf acfed edb gdaecb bd | deb bd dcfbeag dbgf\ncgedbfa dbgf gdfcba bgdeca acefd afcebg fcg agcdb fg gfdac | dgcba fbdg gf fg\nacbgdf gcedaf efgdc ecbdfga fb bdega bfce gdcfeb febgd fgb | eafcbdg defcg gfb gcadbf\nebcgaf dgcaeb acebg cdfbea gbcef fagb gfcde fb efdbagc bef | bfe gdaebc fbaegc gcabedf\nfbgdace efcba bg gbc gcfbed gbad cbagfd fcagd gaefdc bcfga | gbad gb gcdfbe fabgc\nafecb dcbaf aedgcfb ce aedgbf ceb cefg fbega eacdbg acgfbe | agecbf cabgfed abecfg ebc\nfcdge ceabgf aebg aecfg cfbea edabcf ag befgadc acgbfd gca | bega acg cdbgfea agc\ngfcde db cbdge acgbe gbfecad bed ecfagb dgceab dfabec dbag | agdb bde bgceaf efacbd\ndace ae ecgfab degafc eadfg ecfgadb ebfdg aeg dgcaf bcgfad | gea age ea agcbfd\neab cdabe bgcad bcef adcegfb bgafed be ebcafd acfgde dfcea | fbcead acbed be acedf\ncbgde cadeb ba fedabg ebcdagf abcf acefdb dacef dab degafc | fcagde dba ebdgaf eacdf\nebd de caefgb bdeca bgdeaf afbcd gecab cegd bgcfdae ecbagd | adegbc bcfage agfbed eagfbd\necfdb acgdbfe gdb ebfacd bfcg gfdceb efgdb bg aegcbd gaedf | adegf bg ecfgbad bdfaec\necgabd fb bedca beacfd gfcbead fgaed dbf cfeb bedaf cbgadf | abedc dabfe bcfead cedfgba\ngfcae fdgab bafedg cdab dc bdgcaf gbcfead cgfda cdg gcbfde | bdefgc adfgb gdc bgecfd\ncdegf adegcf gdfebca fdg dagc ebcdf agcef dg gdfeba cabegf | gebafc gfd dg gdac\nfaedcb gbecfa bf febg dgbcaef cdgab cgfae fgdeca bfcag fab | dfgacbe gbef fdbaec bfadce\ngcbeda cdegf dcbfe becdgfa fbca edabcf ebgafd efb acedb fb | gdbcae abcf fbac efb\ncdgfba defagb gadebc cd cdbfaeg edagb fbegc ceda cgd bdgce | dgbafc agbfde facdbg gedba\ncedgb egc afcgbd ec cbea gaedfc cbgda afegdbc ebdgac ebgfd | gfcbad gec aegcdf afecgbd\ngbc acdgeb egbfa egbcf cdefg bc efgdbca baefcg afcb fdaegb | ebdcga gecfd ecfgd gebdac\ngdeacb aecfg ebgca defbcag adebc beg gdabef bg acfbed dgcb | dbefga geb fbacde acbge\nebgafd bc gafce cfb cdfagb dbce begfd efbcg gdfecb dacegbf | acegf fcgea cb edcbfag\neagdb deafg fgdb gbdeaf dcgabe ecdgbfa afcge df fda acbfed | gdfb fd gbfeda fda\nfaebg gfaecbd cfegb age gcadbf ebad fdbag bagdfe cgfeda ea | cbfge bafgcd fgabd gbdaf\ndgafecb ag fdebg fdgae fgba fbdage ecgfdb aebcdg fcaed eag | gafde ag egcbfd fbegd\nbdcgf dfceb afgdbc gd ebcgfa fdg gdecfab dbga afbgc adcegf | dg cfbagde bfcdg adcegbf\ncdbaf aefbcd abdefg bdgcaef dgcfb ca aebdf eacd acf ecagbf | dgcbf afc eacgfb egfcba\nbface dacbg dgface bgecaf efbd fbacde dabec cde ebadgcf ed | dce debac ced dagcef\nebfdc efg bfgde dbegcf afdecb cebfag gcde dfacbeg eg afbdg | cdeg edcg gfadecb egcd\nefdgca agebf fcgbdae cdbfg bade dgfab edagfb dga da bafceg | dga adeb cafebg dag\ngbdec cb abcfged dcfeg fdacgb cbgdae agdeb acbe egbfda cbd | dcefg baec gdbcafe dbaeg\ngcdab cabfg ecgfa gfb efab dbegfc cabegdf cefagd fb gaefbc | egafdc baegfc feab aefb\ndacfeb dfc dgbac fd becdfag afcbge aebfc dcafb efad gebfcd | cdf bgacef efcgbd dabcfe\ndfcage bfdgec gcbfd gcfab agedbf edcfg fbd db gdceabf debc | acbfg dbf fdb bdce\ndbcge egf debagc gcedf cadfe bgcdfe bdfg gf cebgadf gbafec | gbdec dcegb gefdc gedbca\nebdfcga bfecd feacd daeg cfgad ea dfagce cfgbae afbcgd aef | dcbgaf adbgefc cedbf dgfac\nebfac dcgbf ecg degf cegbf cdgefb dabcge facdgb bfcdaeg ge | ge eg bfcae fegd\nbd fbacge edbc gfabed cegbf fcdgbea febgdc dcbgf dgfca dgb | gbefc efcgba db abefgc\ndacfgb dbacge bcf abcdfe bf fdabgec dcagb bagf gcbfd dcgef | agbfdc deacgb bdcag fb\necgfa bgdfeca fgdbec ebafdc gbdcfa bfacd dgf gd bgad gcdfa | fcagbd bgda fadgc gbfdec\ndecab gcfbe faegdc gafb bgfeca ebcadgf ag ecgdbf gea eabcg | ga egdfac bcfeg ga\nebfgd dbcgfe fgabd egad fecgab ga fagdeb cdbfa afg dgcbefa | gfa ag ag gfbad\nfgcade agbf fgcdabe ceafb gefca eagbfc bca fcedb ab edbgac | bgdeac ebcdf fagb bca\neacbfg eabfcgd edfac ebfdc cgdeba bd dbc bfgedc bfdg ecbfg | gbdf bcd fdace bdfg\nbfdace cbfagd cbadf gedcabf adfbe faebg beagcd de dae cefd | fcde fabdgc aegfb aed\ndeacb gfbeda dcbfa acbdge decfbg cagbedf ae eda bgedc gcea | dbefgc edgbfc ae ea\necfag bcafed bgdca ebagc cebagd abegcfd dagfcb be bdeg eab | gbeca acbdeg bagfdc bae\ncagef bdea dag egdaf agedbf egfbd bcfgad cgebadf ad egcbfd | dgeaf gad becdgf begcafd\nefcba egbfadc fgebd gbfaec bafedc efgcad ebfad da dabc ead | ebcagdf ead fecbag bcgadfe\nefa cadfb fgdcbe cegafd fcbeg abecgf cebaf aecdbfg beag ae | bdcfa bcagfe cbefg ea\nceab aedbcf fdbce cb daefb dgacbfe gcdafb bafdeg dcegf cdb | bc abce afegbd edgfba\nafdegc acdfbg debcfag facebg bdgc dac dc acdbf gbcaf efdab | cd gadefbc cbfga abcgf\necf fc gdefc feabdg dcabef edagc bfdge fgdbec fcbaedg fbcg | efc bgfcde caedg gdfce\ngfeab aefdgc cdefgb bcfgd ad fad adbc acbfgd fgdba bgfedac | fgcdeba da gfdab cegdaf\nbea gebfd edfbacg egcdfa ab dagec dgeba dcab abcdge cgeabf | acdbge ba gecafd dfbge";

function parseLine(line) {
  var split = line.split(" | ");
  var signalStr = Caml_array.get(split, 0);
  var outputStr = Caml_array.get(split, 1);
  var patterns = $$Array.of_list($$String.split_on_char(/* ' ' */32, signalStr));
  var outputValue = $$Array.of_list($$String.split_on_char(/* ' ' */32, outputStr));
  return {
          patterns: patterns,
          outputValue: outputValue
        };
}

var makeSet = Belt_SetString.fromArray;

var digitMap = Belt_MapInt.set(Belt_MapInt.set(Belt_MapInt.set(Belt_MapInt.set(Belt_MapInt.set(Belt_MapInt.set(Belt_MapInt.set(Belt_MapInt.set(Belt_MapInt.set(Belt_MapInt.set(undefined, 0, Belt_SetString.fromArray([
                                              "a",
                                              "b",
                                              "c",
                                              "e",
                                              "f",
                                              "g"
                                            ])), 1, Belt_SetString.fromArray([
                                          "c",
                                          "f"
                                        ])), 2, Belt_SetString.fromArray([
                                      "a",
                                      "c",
                                      "d",
                                      "e",
                                      "g"
                                    ])), 3, Belt_SetString.fromArray([
                                  "a",
                                  "c",
                                  "d",
                                  "f",
                                  "g"
                                ])), 4, Belt_SetString.fromArray([
                              "b",
                              "c",
                              "d",
                              "f"
                            ])), 5, Belt_SetString.fromArray([
                          "a",
                          "b",
                          "d",
                          "f",
                          "g"
                        ])), 6, Belt_SetString.fromArray([
                      "a",
                      "b",
                      "d",
                      "e",
                      "f",
                      "g"
                    ])), 7, Belt_SetString.fromArray([
                  "a",
                  "c",
                  "f"
                ])), 8, Belt_SetString.fromArray([
              "a",
              "b",
              "c",
              "d",
              "e",
              "f",
              "g"
            ])), 9, Belt_SetString.fromArray([
          "a",
          "b",
          "c",
          "d",
          "f",
          "g"
        ]));

var signalCountMap = Belt_MapInt.reduce(digitMap, undefined, (function (map, digit, signalSet) {
        var count = Belt_SetString.size(signalSet);
        return Belt_MapInt.update(map, count, (function (v) {
                      if (v !== undefined) {
                        return Caml_option.some(Belt_SetInt.add(Caml_option.valFromOption(v), digit));
                      } else {
                        return Caml_option.some(Belt_SetInt.add(undefined, digit));
                      }
                    }));
      }));

function decodeEasy(pattern) {
  var signals = pattern.split("");
  var size = signals.length;
  var possible = Belt_MapInt.get(signalCountMap, size);
  if (possible === undefined) {
    return ;
  }
  var counts = Caml_option.valFromOption(possible);
  if (Belt_SetInt.size(counts) !== 1) {
    return ;
  }
  var vals = Belt_SetInt.toArray(counts);
  return Caml_array.get(vals, 0);
}

function getEasyDigitCount(entry) {
  return $$Array.fold_left((function (sum, digitSignals) {
                var match = decodeEasy(digitSignals);
                if (match !== undefined) {
                  return sum + 1 | 0;
                } else {
                  return sum;
                }
              }), 0, entry.outputValue);
}

function parseInput(input) {
  return $$Array.of_list(List.map(parseLine, $$String.split_on_char(/* '\n' */10, input)));
}

function part1(param) {
  var input = parseInput(inputStr);
  return $$Array.fold_left((function (sum, entry) {
                return sum + getEasyDigitCount(entry) | 0;
              }), 0, input);
}

console.log("Part 1", part1(undefined));

var InvalidLength = /* @__PURE__ */Caml_exceptions.create("Day08.InvalidLength");

var InvalidDigit = /* @__PURE__ */Caml_exceptions.create("Day08.InvalidDigit");

function findLetter(pattern) {
  var signals = pattern.split("");
  var size = signals.length;
  var possible = Belt_MapInt.get(signalCountMap, size);
  if (possible !== undefined) {
    var counts = Caml_option.valFromOption(possible);
    var vals = Belt_SetInt.toArray(counts);
    if (Belt_SetInt.size(counts) === 1) {
      return {
              TAG: /* Found */0,
              _0: Caml_array.get(vals, 0)
            };
    } else {
      return {
              TAG: /* Possible */1,
              _0: vals
            };
    }
  }
  throw {
        RE_EXN_ID: InvalidLength,
        Error: new Error()
      };
}

function optionPatternToSet(pattern) {
  if (pattern !== undefined) {
    return Caml_option.some(Belt_SetString.fromArray(pattern.split("")));
  }
  
}

function canBeDigits(pattern, decoded) {
  var letters = Belt_SetString.fromArray(pattern.split(""));
  var patternByDigit = Belt_MapString.reduce(decoded, undefined, (function (map, pattern, digit) {
          return Belt_MapInt.set(map, digit, pattern);
        }));
  var digit1 = optionPatternToSet(Belt_MapInt.get(patternByDigit, 1));
  var digit4 = optionPatternToSet(Belt_MapInt.get(patternByDigit, 4));
  var digit7 = optionPatternToSet(Belt_MapInt.get(patternByDigit, 7));
  var digit8 = optionPatternToSet(Belt_MapInt.get(patternByDigit, 8));
  var match = Belt_SetString.size(letters);
  if (match !== 5) {
    if (match !== 6) {
      var p = Belt_MapString.get(decoded, pattern);
      if (p !== undefined) {
        return {
                TAG: /* Found */0,
                _0: p
              };
      } else {
        return {
                TAG: /* Possible */1,
                _0: []
              };
      }
    }
    if (digit1 === undefined) {
      return {
              TAG: /* Possible */1,
              _0: [
                0,
                6,
                9
              ]
            };
    }
    if (digit4 === undefined) {
      return {
              TAG: /* Possible */1,
              _0: [
                0,
                6,
                9
              ]
            };
    }
    var d4 = Caml_option.valFromOption(digit4);
    var d1 = Caml_option.valFromOption(digit1);
    var intersect4 = Belt_SetString.intersect(letters, d4);
    var intersect1 = Belt_SetString.intersect(letters, d1);
    if (Belt_SetString.size(intersect4) === Belt_SetString.size(d4)) {
      return {
              TAG: /* Found */0,
              _0: 9
            };
    } else if (Belt_SetString.size(intersect1) === Belt_SetString.size(d1)) {
      return {
              TAG: /* Found */0,
              _0: 0
            };
    } else {
      return {
              TAG: /* Found */0,
              _0: 6
            };
    }
  }
  if (digit4 !== undefined && digit7 !== undefined && digit8 !== undefined) {
    var d7 = Caml_option.valFromOption(digit7);
    var intersect7 = Belt_SetString.intersect(letters, d7);
    var intersect8 = Belt_SetString.intersect(letters, Caml_option.valFromOption(digit8));
    var intersect4$1 = Belt_SetString.intersect(letters, Caml_option.valFromOption(digit4));
    if (Belt_SetString.size(intersect7) === Belt_SetString.size(d7)) {
      return {
              TAG: /* Found */0,
              _0: 3
            };
    } else if (Belt_SetString.size(intersect8) === 5 && Belt_SetString.size(intersect4$1) === 3) {
      return {
              TAG: /* Found */0,
              _0: 5
            };
    } else {
      return {
              TAG: /* Found */0,
              _0: 2
            };
    }
  }
  return {
          TAG: /* Possible */1,
          _0: [
            2,
            3,
            5
          ]
        };
}

function decodeLine(_patterns, _decoded, letterMapping) {
  while(true) {
    var decoded = _decoded;
    var patterns = _patterns;
    if (!patterns) {
      return decoded;
    }
    var rest = patterns.tl;
    var head = patterns.hd;
    var digit = findLetter(head);
    if (digit.TAG === /* Found */0) {
      var updated = Belt_MapString.set(decoded, head, digit._0);
      _decoded = updated;
      _patterns = rest;
      continue ;
    }
    var possible = canBeDigits(head, decoded);
    if (possible.TAG === /* Found */0) {
      var updated$1 = Belt_MapString.set(decoded, head, possible._0);
      _decoded = updated$1;
      _patterns = rest;
      continue ;
    }
    var newList = List.append(rest, {
          hd: head,
          tl: /* [] */0
        });
    _patterns = newList;
    continue ;
  };
}

var PatternNotFound = /* @__PURE__ */Caml_exceptions.create("Day08.PatternNotFound");

function decodeOutput(patterns, decoded) {
  return Caml_format.caml_int_of_string($$Array.map((function (kv) {
                      if (kv !== undefined) {
                        return kv[1];
                      }
                      throw {
                            RE_EXN_ID: PatternNotFound,
                            Error: new Error()
                          };
                    }), $$Array.map((function (p) {
                          var letters = Belt_SetString.fromArray(p.split(""));
                          return Belt_MapString.findFirstBy(decoded, (function (pattern, param) {
                                        var patternSet = Belt_SetString.fromArray(pattern.split(""));
                                        var intersection = Belt_SetString.intersect(letters, patternSet);
                                        if (Belt_SetString.size(intersection) === Belt_SetString.size(patternSet)) {
                                          return Belt_SetString.size(intersection) >= Belt_SetString.size(letters);
                                        } else {
                                          return false;
                                        }
                                      }));
                        }), patterns)).join(""));
}

function part2(param) {
  var input = parseInput(inputStr);
  var outputDigits = $$Array.map((function (entry) {
          var decoded = decodeLine($$Array.to_list(entry.patterns), undefined, undefined);
          return decodeOutput(entry.outputValue, decoded);
        }), input);
  return $$Array.fold_left((function (sum, digit) {
                return sum + digit | 0;
              }), 0, outputDigits);
}

console.log("Part 2", part2(undefined));

var exampleInputStr = "be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb | fdgacbe cefdb cefbgd gcbe\nedbfga begcd cbg gc gcadebf fbgde acbgfd abcde gfcbed gfec | fcgedb cgb dgebacf gc\nfgaebd cg bdaec gdafb agbcfd gdcbef bgcad gfac gcb cdgabef | cg cg fdcagb cbg\nfbegcd cbd adcefb dageb afcb bc aefdc ecdab fgdeca fcdbega | efabcd cedba gadfec cb\naecbfdg fbg gf bafeg dbefa fcge gcbea fcaegb dgceab fcbdga | gecf egdcabf bgf bfgea\nfgeab ca afcebg bdacfeg cfaedg gcfdb baec bfadeg bafgc acf | gebdcfa ecba ca fadegcb\ndbcfg fgd bdegcaf fgec aegbdf ecdfab fbedc dacgb gdcebf gf | cefg dcbef fcge gbcadfe\nbdfegc cbegaf gecbf dfcage bdacg ed bedf ced adcbefg gebcd | ed bcgafe cdgba cbgef\negadfb cdbfeg cegd fecab cgb gbdefca cg fgcdab egfdb bfceg | gbdfcae bgc cg cgb\ngcafb gcf dcaebfg ecagb gf abcdeg gaef cafbge fdbac fegbdc | fgae cfgab fg bagce";

exports.exampleInputStr = exampleInputStr;
exports.inputStr = inputStr;
exports.parseLine = parseLine;
exports.makeSet = makeSet;
exports.digitMap = digitMap;
exports.signalCountMap = signalCountMap;
exports.decodeEasy = decodeEasy;
exports.getEasyDigitCount = getEasyDigitCount;
exports.parseInput = parseInput;
exports.part1 = part1;
exports.InvalidLength = InvalidLength;
exports.InvalidDigit = InvalidDigit;
exports.findLetter = findLetter;
exports.optionPatternToSet = optionPatternToSet;
exports.canBeDigits = canBeDigits;
exports.decodeLine = decodeLine;
exports.PatternNotFound = PatternNotFound;
exports.decodeOutput = decodeOutput;
exports.part2 = part2;
/* digitMap Not a pure module */
